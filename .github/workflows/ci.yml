name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1) Your original CI: lint, format-check, tests on Ubuntu
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            api/requirements.txt
            dev-requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install -r dev-requirements.txt
          pip install -e api
          # If ruff is NOT in dev-requirements.txt, uncomment the next line:
          # pip install ruff

      - name: Ruff lint
        run: ruff check api scripts truthrun

      - name: Ruff format (check only)
        run: ruff format api scripts truthrun --check

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///:memory:"
          NAOK_FULCRUM_PRIME_KEY: ${{ secrets.NAOK_FULCRUM_PRIME_KEY }}
          NAOK_FULCRUM_SALT: ${{ secrets.NAOK_FULCRUM_SALT }}
          MERKLE_ANCHOR_ENABLED: "True"
        run: python -m pytest --cov=api --cov-report=xml

  # 2) Fast ANN gate: DIAG is parity SoT; VERIFY reads DIAG; enforce gates
  receipts:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # Optional cache for speed:
          # cache: 'pip'

      - name: Deps
        run: |
          python -m pip install --upgrade pip
          pip install numpy faiss-cpu

      - name: DIAG (parity SoT)
        shell: pwsh
        run: |
          python scripts/ann_diag.py `
            --input clarity_clean_analysis/02_output/index.npy `
            --ids   clarity_clean_analysis/02_output/index.ids.json `
            --dim 1024 --k 10 --samples 200 `
            --modes faiss_truth,faiss_flat `
            --receipt binder_receipts/ann_diag.json

      - name: VERIFY via DIAG (merge receipt)
        shell: pwsh
        run: |
          python scripts/ann_verify_via_diag.py `
            --input clarity_clean_analysis/02_output/index.npy `
            --ids   clarity_clean_analysis/02_output/index.ids.json `
            --dim 1024 `
            --diag_script scripts/ann_diag.py `
            --diag_receipt binder_receipts/ann_diag.json `
            --verify_receipt binder_receipts/swap_verify.json

      - name: Gates
        shell: python
        run: |
          import json, sys
          d=json.load(open("binder_receipts/ann_diag.json","r",encoding="utf-8"))
          s=json.load(open("binder_receipts/swap_verify.json","r",encoding="utf-8"))
          ok = d["overlap"]["faiss_truth_vs_faiss_flat"] >= 0.99 and s["faiss"]["p95_ms"] <= 150
          print("DIAG overlap:", d["overlap"]["faiss_truth_vs_faiss_flat"])
          print("VERIFY p95:", s["faiss"]["p95_ms"])
          sys.exit(0 if ok else 1)

  # 3) Repo hygiene: refuse tracked ANN index binaries
  guard-binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Block large ANN binaries from repo
        run: |
          set -e
          bad=$(git ls-files | grep -E 'clarity_clean_analysis/02_output/.*\.(ivf|bin)$' || true)
          test -z "$bad" || (echo "Refuse tracked ANN binaries:" && echo "$bad" && exit 1)
